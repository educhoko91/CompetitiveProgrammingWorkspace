<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Trie" enabled="true" name="trie">	/*&#13;
	 * &#13;
	 * ********&#13;
	 * * TRIE * &#13;
	 * ********&#13;
	 * &#13;
	 * TEMPLATE: trie&#13;
	 */&#13;
&#13;
	public static Nodo root = new Nodo();&#13;
&#13;
	public static void addWord(Nodo vertex, StringBuilder word) {&#13;
		if (word.length() == 0) {&#13;
			vertex.words++;&#13;
		} else {&#13;
			vertex.prefixes++;&#13;
			int k = word.charAt(0) - 'a';&#13;
			if (vertex.edges[k] == null) {&#13;
				vertex.edges[k] = new Nodo();&#13;
			}&#13;
			addWord(vertex.edges[k], word.deleteCharAt(0));&#13;
		}&#13;
	}&#13;
&#13;
	public static int countWords(Nodo vertex, StringBuilder word) {&#13;
		int k = word.charAt(0) - 'a';&#13;
		if (word.length() == 0) {&#13;
			return vertex.words;&#13;
		} else if (vertex.edges[k] == null) {&#13;
			return 0;&#13;
		} else {&#13;
			return countWords(vertex.edges[k], word.deleteCharAt(0));&#13;
		}&#13;
	}&#13;
&#13;
	public static int countPrefixes(Nodo vertex, StringBuilder prefix) {&#13;
		int k = prefix.charAt(0) - 'a';&#13;
		if (prefix.length() == 0) {&#13;
			return vertex.prefixes;&#13;
		} else if (vertex.edges[k] == null) {&#13;
			return 0;&#13;
		} else {&#13;
			return countPrefixes(vertex.edges[k], prefix.deleteCharAt(0));&#13;
		}&#13;
	}&#13;
&#13;
	static class Nodo {&#13;
		int words;&#13;
		int prefixes;&#13;
		Nodo[] edges = new Nodo[26];&#13;
&#13;
		public Nodo() {&#13;
			this.words = 0;&#13;
			this.prefixes = 0;&#13;
			for (int i = 0; i &lt; 26; i++) {&#13;
				this.edges[i] = null;&#13;
			}&#13;
		}&#13;
	}&#13;
</template></templates>