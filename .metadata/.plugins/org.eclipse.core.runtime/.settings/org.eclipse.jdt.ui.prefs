content_assist_disabled_computers=org.eclipse.jdt.ui.textProposalCategory\u0000org.eclipse.recommenders.calls.rcp.proposalCategory.templates\u0000org.eclipse.mylyn.java.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaTypeProposalCategory\u0000org.eclipse.jdt.ui.javaNoTypeProposalCategory\u0000org.eclipse.recommenders.chain.rcp.proposalCategory.chain\u0000
content_assist_lru_history=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><history maxLHS\="100" maxRHS\="10"><lhs name\="java.io.FilterInputStream"><rhs name\="java.io.BufferedInputStream"/></lhs><lhs name\="java.io.InputStream"><rhs name\="java.io.BufferedInputStream"/></lhs><lhs name\="java.io.Closeable"><rhs name\="java.io.BufferedInputStream"/><rhs name\="java.util.Scanner"/><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.lang.AutoCloseable"><rhs name\="java.io.BufferedInputStream"/><rhs name\="java.util.Scanner"/><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.io.BufferedInputStream"><rhs name\="java.io.BufferedInputStream"/></lhs><lhs name\="java.io.Reader"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.lang.Readable"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.io.BufferedReader"><rhs name\="java.io.BufferedReader"/></lhs><lhs name\="java.io.InputStreamReader"><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.lang.Number"><rhs name\="java.math.BigInteger"/><rhs name\="java.lang.Integer"/></lhs><lhs name\="java.math.BigInteger"><rhs name\="java.math.BigInteger"/></lhs><lhs name\="java.util.List"><rhs name\="java.util.Stack"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.RandomAccess"><rhs name\="java.util.Stack"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.lang.Cloneable"><rhs name\="java.util.Stack"/><rhs name\="java.util.LinkedHashSet"/><rhs name\="java.util.HashSet"/><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.Collection"><rhs name\="java.util.Stack"/><rhs name\="java.util.LinkedHashSet"/><rhs name\="java.util.PriorityQueue"/><rhs name\="java.util.LinkedList"/><rhs name\="java.util.HashSet"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.lang.Iterable"><rhs name\="java.util.Stack"/><rhs name\="java.util.LinkedHashSet"/><rhs name\="java.util.PriorityQueue"/><rhs name\="java.util.LinkedList"/><rhs name\="java.util.HashSet"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.AbstractList"><rhs name\="java.util.Stack"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.AbstractCollection"><rhs name\="java.util.Stack"/><rhs name\="java.util.LinkedHashSet"/><rhs name\="java.util.HashSet"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.ArrayList"><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.lang.CharSequence"><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="java.lang.AbstractStringBuilder"><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="java.lang.Appendable"><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="java.util.Iterator"><rhs name\="java.util.Scanner"/></lhs><lhs name\="java.util.Map"><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.AbstractMap"><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.HashMap"><rhs name\="java.util.HashMap"/></lhs><lhs name\="java.util.Vector"><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.Stack"><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.Set"><rhs name\="java.util.LinkedHashSet"/><rhs name\="java.util.HashSet"/></lhs><lhs name\="java.util.AbstractSet"><rhs name\="java.util.LinkedHashSet"/><rhs name\="java.util.HashSet"/></lhs><lhs name\="java.util.HashSet"><rhs name\="java.util.LinkedHashSet"/><rhs name\="java.util.HashSet"/></lhs><lhs name\="java.util.Enumeration"><rhs name\="java.util.StringTokenizer"/></lhs><lhs name\="java.util.StringTokenizer"><rhs name\="java.util.StringTokenizer"/></lhs><lhs name\="java.util.Queue"><rhs name\="java.util.PriorityQueue"/><rhs name\="java.util.LinkedList"/></lhs><lhs name\="java.util.LinkedHashSet"><rhs name\="java.util.LinkedHashSet"/></lhs><lhs name\="Main$Nodo"><rhs name\="Main$Nodo"/></lhs><lhs name\="java.util.NavigableMap"><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.SortedMap"><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.TreeMap"><rhs name\="java.util.TreeMap"/></lhs><lhs name\="Main$Pair"><rhs name\="Main$Pair"/></lhs></history>
content_assist_number_of_computers=19
content_assist_proposals_background=255,255,255
content_assist_proposals_foreground=0,0,0
eclipse.preferences.version=1
fontPropagated=true
markOccurrences=false
org.eclipse.jdt.ui.editor.tab.width=
org.eclipse.jdt.ui.exception.name=e
org.eclipse.jdt.ui.formatterprofiles.version=12
org.eclipse.jdt.ui.gettersetter.use.is=true
org.eclipse.jdt.ui.javadoclocations.migrated=true
org.eclipse.jdt.ui.overrideannotation=true
org.eclipse.jdt.ui.text.code_templates_migrated=true
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates/>
org.eclipse.jdt.ui.text.custom_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="java" deleted\="false" description\="" enabled\="true" name\="fastIO">public static void main(String[] args) throws Exception&\#13;\r\n    {&\#13;\r\n        InputReader in \= new InputReader(System.in);&\#13;\r\n        ${cursor}&\#13;\r\n    }&\#13;\r\n&\#13;\r\n    // FAST IO&\#13;\r\n\tprivate static class InputReader {&\#13;\r\n\t\tprivate InputStream stream;&\#13;\r\n\t\tprivate byte[] buf \= new byte[1024];&\#13;\r\n\t\tprivate int curChar;&\#13;\r\n\t\tprivate int numChars;&\#13;\r\n\t\tprivate SpaceCharFilter filter;&\#13;\r\n&\#13;\r\n\t\tpublic InputReader(InputStream stream) {&\#13;\r\n\t\t\tthis.stream \= stream;&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic int read() throws EOFException {&\#13;\r\n\t\t\tif (numChars \=\= -1)&\#13;\r\n\t\t\t\tthrow new EOFException();&\#13;\r\n\t\t\tif (curChar &gt;\= numChars) {&\#13;\r\n\t\t\t\tcurChar \= 0;&\#13;\r\n\t\t\t\ttry {&\#13;\r\n\t\t\t\t\tnumChars \= stream.read(buf);&\#13;\r\n\t\t\t\t} catch (IOException e) {&\#13;\r\n\t\t\t\t\tthrow new InputMismatchException();&\#13;\r\n\t\t\t\t}&\#13;\r\n\t\t\t\tif (numChars &lt;\= 0)&\#13;\r\n\t\t\t\t\treturn -1;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\treturn buf[curChar++];&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic int nextInt() throws EOFException {&\#13;\r\n\t\t\tint c \= read();&\#13;\r\n\t\t\twhile (isSpaceChar(c))&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\tint sgn \= 1;&\#13;\r\n\t\t\tif (c \=\= '-') {&\#13;\r\n\t\t\t\tsgn \= -1;&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\tint res \= 0;&\#13;\r\n\t\t\tdo {&\#13;\r\n\t\t\t\tif (c &lt; '0' || c &gt; '9')&\#13;\r\n\t\t\t\t\tthrow new InputMismatchException();&\#13;\r\n\t\t\t\tres *\= 10;&\#13;\r\n\t\t\t\tres +\= c - '0';&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t} while (\!isSpaceChar(c));&\#13;\r\n\t\t\treturn res * sgn;&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic String readString() throws EOFException {&\#13;\r\n\t\t\tint c \= read();&\#13;\r\n\t\t\twhile (isSpaceChar(c))&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\tStringBuilder res \= new StringBuilder();&\#13;\r\n\t\t\tdo {&\#13;\r\n\t\t\t\tres.appendCodePoint(c);&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t} while (\!isSpaceChar(c));&\#13;\r\n\t\t\treturn res.toString();&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic double nextDouble() throws EOFException {&\#13;\r\n\t\t\tint c \= read();&\#13;\r\n\t\t\twhile (isSpaceChar(c))&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\tint sgn \= 1;&\#13;\r\n\t\t\tif (c \=\= '-') {&\#13;\r\n\t\t\t\tsgn \= -1;&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\tdouble res \= 0;&\#13;\r\n\t\t\twhile (\!isSpaceChar(c) &amp;&amp; c \!\= '.') {&\#13;\r\n\t\t\t\tif (c \=\= 'e' || c \=\= 'E')&\#13;\r\n\t\t\t\t\treturn res * Math.pow(10, nextInt());&\#13;\r\n\t\t\t\tif (c &lt; '0' || c &gt; '9')&\#13;\r\n\t\t\t\t\tthrow new InputMismatchException();&\#13;\r\n\t\t\t\tres *\= 10;&\#13;\r\n\t\t\t\tres +\= c - '0';&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\tif (c \=\= '.') {&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t\tdouble m \= 1;&\#13;\r\n\t\t\t\twhile (\!isSpaceChar(c)) {&\#13;\r\n\t\t\t\t\tif (c \=\= 'e' || c \=\= 'E')&\#13;\r\n\t\t\t\t\t\treturn res * Math.pow(10, nextInt());&\#13;\r\n\t\t\t\t\tif (c &lt; '0' || c &gt; '9')&\#13;\r\n\t\t\t\t\t\tthrow new InputMismatchException();&\#13;\r\n\t\t\t\t\tm /\= 10;&\#13;\r\n\t\t\t\t\tres +\= (c - '0') * m;&\#13;\r\n\t\t\t\t\tc \= read();&\#13;\r\n\t\t\t\t}&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\treturn res * sgn;&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic long nextLong() throws EOFException {&\#13;\r\n\t\t\tint c \= read();&\#13;\r\n\t\t\twhile (isSpaceChar(c))&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\tint sgn \= 1;&\#13;\r\n\t\t\tif (c \=\= '-') {&\#13;\r\n\t\t\t\tsgn \= -1;&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\tlong res \= 0;&\#13;\r\n\t\t\tdo {&\#13;\r\n\t\t\t\tif (c &lt; '0' || c &gt; '9')&\#13;\r\n\t\t\t\t\tthrow new InputMismatchException();&\#13;\r\n\t\t\t\tres *\= 10;&\#13;\r\n\t\t\t\tres +\= c - '0';&\#13;\r\n\t\t\t\tc \= read();&\#13;\r\n\t\t\t} while (\!isSpaceChar(c));&\#13;\r\n\t\t\treturn res * sgn;&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic boolean isSpaceChar(int c) {&\#13;\r\n\t\t\tif (filter \!\= null)&\#13;\r\n\t\t\t\treturn filter.isSpaceChar(c);&\#13;\r\n\t\t\treturn c \=\= ' ' || c \=\= '\\n' || c \=\= '\\r' || c \=\= '\\t' || c \=\= -1;&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic String next() throws EOFException {&\#13;\r\n\t\t\treturn readString();&\#13;\r\n\t\t}&\#13;\r\n&\#13;\r\n\t\tpublic interface SpaceCharFilter {&\#13;\r\n\t\t\tpublic boolean isSpaceChar(int ch);&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n</template><template autoinsert\="true" context\="java" deleted\="false" description\="Union Find" enabled\="true" name\="union">\t/*&\#13;\r\n\t * &\#13;\r\n\t * **************&\#13;\r\n\t * * UNION FIND *&\#13;\r\n\t * **************&\#13;\r\n\t * &\#13;\r\n\t * TEMPLATE\: union&\#13;\r\n\t * &\#13;\r\n\t */&\#13;\r\n\t&\#13;\r\n\tpublic static int parent[];&\#13;\r\n\tpublic static int numSets;&\#13;\r\n\tpublic static int setSize[];&\#13;\r\n\t&\#13;\r\n\tpublic static void initSet(int n) {&\#13;\r\n\t\tparent \= new int[n];&\#13;\r\n\t\tsetSize \= new int[n];&\#13;\r\n\t\tnumSets\=n;&\#13;\r\n\t\tfor(int i\=0; i&lt;n; i++) {&\#13;\r\n\t\t\tparent[i]\=i;&\#13;\r\n\t\t\tsetSize[i]\=1;&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic static int findSet(int i) {&\#13;\r\n\t\tif(parent[i]\=\=i) {&\#13;\r\n\t\t\treturn i;&\#13;\r\n\t\t}&\#13;\r\n\t\treturn findSet(parent[i]);&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic static void unionSet(int i, int j) {&\#13;\r\n\t\tif(\!isSameSet(i, j)) { &\#13;\r\n\t\t\tnumSets--;&\#13;\r\n\t\t\tsetSize[findSet(i)] +\= setSize[findSet(j)];&\#13;\r\n\t\t}&\#13;\r\n\t\tparent[findSet(i)] \= findSet(j);&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic static int sizeOfSet(int i) {&\#13;\r\n\t\treturn setSize[findSet(i)];&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic static boolean isSameSet(int i, int j) {&\#13;\r\n\t\treturn findSet(i) \=\= findSet(j);&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic static int countSets() {&\#13;\r\n\t\treturn numSets;&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="Articulation Point And Bridge" enabled\="true" name\="bridge">\t/*&\#13;\r\n\t *&\#13;\r\n\t *  *********************************&\#13;\r\n\t *  * ARTICULATION POINT AND BRIDGE *&\#13;\r\n\t *  *********************************&\#13;\r\n\t *  &\#13;\r\n\t *  TEMPLATE\: bridge&\#13;\r\n\t *&\#13;\r\n\t */&\#13;\r\n\t&\#13;\r\n\t&\#13;\r\n\tpublic static int[] dfsNum;&\#13;\r\n\tpublic static int[] dfsLow;&\#13;\r\n\tpublic static int dfsCounter;&\#13;\r\n\tpublic static int[] dfsParent;&\#13;\r\n\tpublic static int dfsRoot;&\#13;\r\n\tpublic static int rootChildren;&\#13;\r\n\tpublic static boolean[] visit;&\#13;\r\n\tpublic static boolean[] articulationVertex;&\#13;\r\n\tpublic static ArrayList&lt;ArrayList&lt;Integer&gt;&gt; graph;&\#13;\r\n\t&\#13;\r\n\t/*&\#13;\r\n\t * num \= Numero de Vertices&\#13;\r\n\t */&\#13;\r\n\tpublic static void init(int num) {&\#13;\r\n\t\tdfsLow \= new int[num];&\#13;\r\n\t\tdfsNum \= new int[num];&\#13;\r\n\t\tvisit \= new boolean[num];&\#13;\r\n\t\tarticulationVertex \= new boolean[num];&\#13;\r\n\t\tdfsParent \= new int[num];&\#13;\r\n\t\tdfsCounter\=0;&\#13;\r\n\t\tdfsRoot\=0;&\#13;\r\n\t\trootChildren\=0;&\#13;\r\n\t\t// cambiar dependiendo del indice&\#13;\r\n\t\tfor(int i\=0; i&lt;num; i++) {&\#13;\r\n\t\t\tgraph.add(new ArrayList&lt;Integer&gt;());&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic static void articulationPointAndBridge(int u) {&\#13;\r\n\t\tdfsCounter++;&\#13;\r\n\t\tdfsNum[u]\=dfsCounter;&\#13;\r\n\t\tdfsLow[u]\=dfsCounter;&\#13;\r\n\t\tvisit[u]\=true;&\#13;\r\n\t\tfor(Integer v\: graph.get(u)) {&\#13;\r\n\t\t\tif(\!visit[v]) {&\#13;\r\n\t\t\t\tdfsParent[v]\=u;&\#13;\r\n\t\t\t\tif(u\=\=dfsRoot)&\#13;\r\n\t\t\t\t\trootChildren++;&\#13;\r\n\t\t\t\t&\#13;\r\n\t\t\t\tarticulationPointAndBridge(v);&\#13;\r\n\t\t\t\t&\#13;\r\n\t\t\t\t/*&\#13;\r\n\t\t\t\t * Verifica si es articulacion&\#13;\r\n\t\t\t\t */&\#13;\r\n\t\t\t\tif(dfsLow[v] &gt;\= dfsNum[u]) {&\#13;\r\n\t\t\t\t\tarticulationVertex[u] \= true;&\#13;\r\n\t\t\t\t}&\#13;\r\n\t\t\t\t/*&\#13;\r\n\t\t\t\t * Verifica si es un puente&\#13;\r\n\t\t\t\t */&\#13;\r\n\t\t\t\tif(dfsLow[v] &gt; dfsNum[u]) {&\#13;\r\n\t\t\t\t\t//System.out.printf(" Edge (%d, %d) is a bridge\\n", u, v);&\#13;\r\n\t\t\t\t}&\#13;\r\n\t\t\t\tdfsLow[u] \= Math.min(dfsLow[u], dfsLow[v]);\t&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\telse if(v\!\=dfsParent[u]) {&\#13;\r\n\t\t\t\tdfsLow[u] \= Math.min(dfsLow[u], dfsNum[v]);\t&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n&\#13;\r\n\tpublic static void findArticulationPointAndBridge() {&\#13;\r\n\t\t// cambiar dependiendo del indice&\#13;\r\n\t\tfor(int i\=0; i&lt;graph.size(); i++) {&\#13;\r\n\t\t\tif(\!visit[i]) {&\#13;\r\n\t\t\t\tdfsRoot \= i;&\#13;\r\n\t\t\t\trootChildren\=0;&\#13;\r\n\t\t\t\tarticulationPointAndBridge(dfsRoot);&\#13;\r\n\t\t\t\tarticulationVertex[dfsRoot] \= (rootChildren&gt;1);&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="Segment Tree" enabled\="true" name\="segtree">\t/*&\#13;\r\n\t * &\#13;\r\n\t * ****************&\#13;\r\n\t * * SEGMENT TREE *&\#13;\r\n\t * ****************&\#13;\r\n\t * &\#13;\r\n\t * TEMPLATE\: segtree&\#13;\r\n\t * &\#13;\r\n\t */&\#13;\r\n\t&\#13;\r\n\t/* el tamano del tree debe ser 4 veces mas grande que el de v */&\#13;\r\n\tpublic static int tree[];&\#13;\r\n\t/* Array donde se guardan los valores */&\#13;\r\n\tpublic static int v[];&\#13;\r\n&\#13;\r\n\tvoid init(int node, int a, int b) {&\#13;\r\n\t\t&\#13;\r\n\t\tif (a \=\= b) {&\#13;\r\n\t\t\ttree[node] \= v[a];&\#13;\r\n\t\t\treturn;&\#13;\r\n\t\t}&\#13;\r\n\t\tinit(2*node+1, a, (a + b)/2);&\#13;\r\n\t\tinit(2*node+2, (a+b)/2+1, b);&\#13;\r\n\t\ttree[node] \= tree[2*node+1] + tree[2*node+2];&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tint query(int node, int a, int b, int p, int q) {&\#13;\r\n\t\tif (q &lt; a || b &lt; p) return 0; // return 0 for sum, 1 for product&\#13;\r\n\t\tif (p &lt;\= a &amp;&amp; b &lt;\= q) return tree[node];&\#13;\r\n\t\treturn query(2*node+1, a, (a+b)/2, p, q) + query(2*node+2, (a+b)/2+1, b, p, q);&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tvoid update(int node, int a, int b, int p, int val) {&\#13;\r\n\t\tif (p &lt; a || b &lt; p) return;&\#13;\r\n\t\tif (a \=\= b) {&\#13;\r\n\t\t\ttree[node] \= val;&\#13;\r\n\t\t\treturn;&\#13;\r\n\t\t}&\#13;\r\n\t\tupdate(2*node+1, a, (a+b)/2, p, val);&\#13;\r\n\t\tupdate(2*node+2, (a+b)/2+1, b, p, val);&\#13;\r\n\t\ttree[node] \= tree[2*node+1] + tree[2*node+2];&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="Trie" enabled\="true" name\="trie">\t/*&\#13;\r\n\t * &\#13;\r\n\t * ********&\#13;\r\n\t * * TRIE * &\#13;\r\n\t * ********&\#13;\r\n\t * &\#13;\r\n\t * TEMPLATE\: trie&\#13;\r\n\t */&\#13;\r\n&\#13;\r\n\tpublic static Nodo root \= new Nodo();&\#13;\r\n&\#13;\r\n\tpublic static void addWord(Nodo vertex, StringBuilder word) {&\#13;\r\n\t\tif (word.length() \=\= 0) {&\#13;\r\n\t\t\tvertex.words++;&\#13;\r\n\t\t} else {&\#13;\r\n\t\t\tvertex.prefixes++;&\#13;\r\n\t\t\tint k \= word.charAt(0) - 'a';&\#13;\r\n\t\t\tif (vertex.edges[k] \=\= null) {&\#13;\r\n\t\t\t\tvertex.edges[k] \= new Nodo();&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\taddWord(vertex.edges[k], word.deleteCharAt(0));&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic static int countWords(Nodo vertex, StringBuilder word) {&\#13;\r\n\t\tint k \= word.charAt(0) - 'a';&\#13;\r\n\t\tif (word.length() \=\= 0) {&\#13;\r\n\t\t\treturn vertex.words;&\#13;\r\n\t\t} else if (vertex.edges[k] \=\= null) {&\#13;\r\n\t\t\treturn 0;&\#13;\r\n\t\t} else {&\#13;\r\n\t\t\treturn countWords(vertex.edges[k], word.deleteCharAt(0));&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic static int countPrefixes(Nodo vertex, StringBuilder prefix) {&\#13;\r\n\t\tint k \= prefix.charAt(0) - 'a';&\#13;\r\n\t\tif (prefix.length() \=\= 0) {&\#13;\r\n\t\t\treturn vertex.prefixes;&\#13;\r\n\t\t} else if (vertex.edges[k] \=\= null) {&\#13;\r\n\t\t\treturn 0;&\#13;\r\n\t\t} else {&\#13;\r\n\t\t\treturn countPrefixes(vertex.edges[k], prefix.deleteCharAt(0));&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tstatic class Nodo {&\#13;\r\n\t\tint words;&\#13;\r\n\t\tint prefixes;&\#13;\r\n\t\tNodo[] edges \= new Nodo[26];&\#13;\r\n&\#13;\r\n\t\tpublic Nodo() {&\#13;\r\n\t\t\tthis.words \= 0;&\#13;\r\n\t\t\tthis.prefixes \= 0;&\#13;\r\n\t\t\tfor (int i \= 0; i &lt; 26; i++) {&\#13;\r\n\t\t\t\tthis.edges[i] \= null;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n</template><template autoinsert\="true" context\="java" deleted\="false" description\="" enabled\="true" name\="lazytree">\t/*&\#13;\r\n\t * &\#13;\r\n\t * **************************************&\#13;\r\n\t * * SEGMENT TREE WITH LAZY PROPAGATION *&\#13;\r\n\t * **************************************&\#13;\r\n\t * &\#13;\r\n\t * TEMPLATE\: lazytree&\#13;\r\n\t * &\#13;\r\n\t */&\#13;\r\n\t&\#13;\r\n\t&\#13;\r\n\tstatic long[] tree \= new long[4000000];&\#13;\r\n\t static long[] lazy \= new long[4000000];&\#13;\r\n\t static long[] input \= new long[1000000];&\#13;\r\n\t &\#13;\r\n\t static void init(int node,int s, int e){&\#13;\r\n\t  if(s\=\=e){&\#13;\r\n\t   tree[node]\=input[s];&\#13;\r\n\t   return;&\#13;\r\n\t  }&\#13;\r\n\t  int mid \= (s+e)/2;&\#13;\r\n\t  init(node*2+1,s,mid);&\#13;\r\n\t  init(node*2+2,mid+1,e);&\#13;\r\n\t  tree[node] \= tree[node*2+1]+tree[node*2+2];&\#13;\r\n\t }&\#13;\r\n\t &\#13;\r\n\t //Para actualizar uno solo de los valores&\#13;\r\n\t static void update(int node,int s,int e, int i, long val){&\#13;\r\n\t  // index out of range&\#13;\r\n\t  if(i &lt; s || i &gt; e) return;&\#13;\r\n\t  &\#13;\r\n\t  //update the node&\#13;\r\n\t  if(s\=\=e){&\#13;\r\n\t   tree[node] \= val;&\#13;\r\n\t   return;&\#13;\r\n\t  }&\#13;\r\n\t  int mid \= (s+e)/2;&\#13;\r\n\t  update(node*2+1,s,mid,i,val);&\#13;\r\n\t  update(node*2+2,mid+1,e,i,val);&\#13;\r\n\t  tree[node] \= tree[node*2+1]+tree[node*2+2];&\#13;\r\n\t }&\#13;\r\n\t &\#13;\r\n\t //Para hacer queries sin usar lazy prop&\#13;\r\n\t static  long query(int node,int s, int e, int qs, int qe){&\#13;\r\n\t  if(qe &lt; s || e &lt; qs) return 0; //suma 0 producto 1&\#13;\r\n\t  &\#13;\r\n\t  if(qs &lt;\= s &amp;&amp; e &lt;\= qe){&\#13;\r\n\t   return tree[node];&\#13;\r\n\t  }&\#13;\r\n\t  int mid\=(s+e)/2;&\#13;\r\n\t  return query(node*2+1,s,mid,qs,qe)+query(node*2+2,mid+1,e,qs,qe);&\#13;\r\n\t }&\#13;\r\n\t &\#13;\r\n\t //update range hace uso de lazy prop,&\#13;\r\n\t// en este caso suma una valor val a todos los elementos del rango [us,ue]&\#13;\r\n\t static void update_range(int node,int s, int e, int us, int ue, long val){&\#13;\r\n\t  //Hay actualizaciones lazy q deben hacerse antes &\#13;\r\n\t  if(lazy[node]\!\=0){&\#13;\r\n\t   tree[node] +\= lazy[node];&\#13;\r\n\t   &\#13;\r\n\t   //marcamos los hijos como lazy&\#13;\r\n\t   if(s\!\=e){&\#13;\r\n\t    lazy[node*2+1] +\= val;&\#13;\r\n\t    lazy[node*2+2] +\=val;&\#13;\r\n\t   }&\#13;\r\n\t   &\#13;\r\n\t   lazy[node] \=0; //reseteado el nodo pues ya no es lazy&\#13;\r\n\t  }&\#13;\r\n\t  //fuera de rango&\#13;\r\n\t  if(s&gt; ue || e &lt; us) return;&\#13;\r\n\t  &\#13;\r\n\t  //segmento completamente en rango&\#13;\r\n\t  if(s &gt;\=us &amp;&amp; e &lt;\= ue){&\#13;\r\n\t   tree[node] +\= (e-s+1)*val;&\#13;\r\n\t   &\#13;\r\n\t   if(s\!\=e){ // no es nodo hoja, entonces marcamos los hijos como lazy&\#13;\r\n\t    lazy[node*2+1] +\=val;&\#13;\r\n\t    lazy[node*2+2] +\=val;&\#13;\r\n\t   }&\#13;\r\n\t   &\#13;\r\n\t   return;&\#13;\r\n\t  }&\#13;\r\n\t  &\#13;\r\n\t  int mid \= (s+e)/2;&\#13;\r\n\t  &\#13;\r\n\t  update_range(node*2+1, s, mid, us, ue, val);&\#13;\r\n\t  update_range(node*2+2, mid+1, e, us, ue, val);&\#13;\r\n\t  &\#13;\r\n\t  tree[node] \= tree[node*2+1]+tree[node*2+2];&\#13;\r\n\t }&\#13;\r\n\t &\#13;\r\n\t static long query_lazy(int node,int s,int e, int qs, int qe){&\#13;\r\n\t  &\#13;\r\n\t  // si hay llamadas lazy pendientes las terminamos&\#13;\r\n\t  if(lazy[node] \!\= 0){&\#13;\r\n\t   tree[node] +\= (e-s+1)*lazy[node];&\#13;\r\n\t   if(s \!\= e){&\#13;\r\n\t    lazy[node*2+1] +\= lazy[node];&\#13;\r\n\t    lazy[node*2+2] +\= lazy[node];&\#13;\r\n\t   } &\#13;\r\n\t   lazy[node] \=0;&\#13;\r\n\t  }&\#13;\r\n&\#13;\r\n\t  if( qe &lt; s || e &lt; qs) return 0;&\#13;\r\n\t  &\#13;\r\n\t  if(s &gt;\=qs &amp;&amp; e&lt;\=qe){&\#13;\r\n\t   return tree[node];&\#13;\r\n\t  }&\#13;\r\n\t  &\#13;\r\n\t  int mid \= (s+e)/2;&\#13;\r\n\t  return query_lazy(node*2+1, s, mid, qs, qe)+query_lazy(node*2+2, mid+1, e, qs, qe);&\#13;\r\n\t  &\#13;\r\n\t }&\#13;\r\n</template></templates>
org.eclipse.jdt.ui.text.templates_migrated=true
org.eclipse.jface.textfont=1|Consolas|10.0|0|WINDOWS|1|0|0|0|0|0|0|0|0|1|0|0|0|0|Consolas;
proposalOrderMigrated=true
spelling_locale_initialized=true
tabWidthPropagated=true
useAnnotationsPrefPage=true
useQuickDiffPrefPage=true
